CORE_CLI_DOWNLOAD_ROOT=https://github.com/core-coin/core-cli/releases/download/
#!/bin/sh
# Copyright 2016 The Rust Project Developers. See the COPYRIGHT
# file at the top-level directory of this distribution and at
# http://rust-lang.org/COPYRIGHT.
#
# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
# option. This file may not be copied, modified, or distributed
# except according to those terms.

# This is just a little script that can be downloaded from the internet to
# install core-cli. It just does platform detection, downloads the installer
# and runs it.

{ # this ensures the entire script is downloaded #

GH_LATEST_RELEASE="https://api.github.com/repos/core-coin/core-cli/releases/latest"

set -e

main() {
    downloader --check
    need_cmd uname
    need_cmd mktemp
    need_cmd chmod
    need_cmd mkdir
    need_cmd rm
    need_cmd sed
    need_cmd grep

    _ostype="$(uname -s)"
    _cputype="$(uname -m)"

    case "$_ostype" in
    Linux)
      _ostype=linux
      ;;
    Darwin)
      _ostype=darwin
      ;;
    MINGW*|MSYS*|CYGWIN*|Windows_NT)
      _ostype=windows
      ;;
    *)
      err "machine architecture is currently unsupported"
      ;;
    esac
    TARGET="${_ostype}-${_cputype}"

    core_cli_dir="$HOME/.core-cli"
    ensure mkdir -p "$core_cli_dir"

    release_file="$core_cli_dir/release"
    printf 'looking for latest release\n' 1>&2
    ensure downloader "$GH_LATEST_RELEASE" "$release_file"
    release=$(\
      grep -m 1 \"tag_name\": "$release_file" \
      | sed -ne 's/^ *"tag_name": "\([^"]*\)",$/\1/p' \
    )
    if [ -z "$release" ]; then
      err 'Unable to figure latest release'
    fi

    binary_name="core-cli"
    case "$TARGET" in
    windows-x86_64)
      binary_name="core-cli.exe"
      ;;
    esac

    download_url="$CORE_CLI_DOWNLOAD_ROOT/$release/$binary_name"
    core_cli_install_init="$core_cli_dir/$binary_name"

    printf 'downloading %s core-cli\n' "$release" 1>&2

    ensure downloader "$download_url" "$core_cli_install_init"
    ensure chmod u+x "$core_cli_install_init"

    # Add the .core-cli directory to the PATH
    case "$_ostype" in
    linux|darwin)
      if ! grep -q "$core_cli_dir" "$HOME/.profile"; then
        echo "export PATH=\$PATH:$core_cli_dir" >> "$HOME/.profile"
        export PATH=$PATH:$core_cli_dir
      fi
      ;;
    windows)
      if ! echo "$PATH" | grep -q "$core_cli_dir"; then
        setx PATH "$PATH;$core_cli_dir"
      fi
      ;;
    esac

    return "$retval"
}

err() {
     printf 'core-cli-install-init: %s\n' "$1" >&2
    exit 1
}

need_cmd() {
    if ! check_cmd "$1"; then
        err "need '$1' (command not found)"
    fi
}

check_cmd() {
    command -v "$1" > /dev/null 2>&1
}

# Run a command that should never fail. If the command fails execution
# will immediately terminate with an error showing the failing
# command.
ensure() {
    if ! "$@"; then
      err "command failed: $*"
    fi
}

# This is just for indicating that commands' results are being
# intentionally ignored. Usually, because it's being executed
# as part of error handling.
ignore() {
    "$@"
}

# This wraps curl or wget. Try curl first, if not installed,
# use wget instead.
downloader() {
    if check_cmd curl; then
        program=curl
    elif check_cmd wget; then
        program=wget
    else
        program='curl or wget' # to be used in error message of need_cmd
    fi

    if [ "$1" = --check ]; then
        need_cmd "$program"
    elif [ "$program" = curl ]; then
        curl -sSfL "$1" -o "$2"
    elif [ "$program" = wget ]; then
        wget "$1" -O "$2"
    else
        err "Unknown downloader"   # should not reach here
    fi
}

main "$@"

} # this ensures the entire script is downloaded #